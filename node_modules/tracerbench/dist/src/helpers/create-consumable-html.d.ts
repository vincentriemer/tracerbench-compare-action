import { ITBConfig } from '../command-config';
export interface Sample {
    duration: number;
    js: number;
    phases: Array<{
        phase: string;
        start: number;
        duration: number;
    }>;
    gc: any;
    blinkGC: any;
}
export interface ITracerBenchTraceResult {
    meta: {
        browserVersion: string;
        cpus: string[];
    };
    samples: Sample[];
    set: string;
}
export interface HTMLSectionRenderData {
    isSignificant: boolean;
    ciMin: number;
    ciMax: number;
    hlDiff: number;
    phase: string;
    identifierHash: string;
    controlSamples: string;
    experimentSamples: string;
    sampleCount: number;
    servers: any;
}
interface ValuesByPhase {
    [key: string]: number[];
}
export declare const PAGE_LOAD_TIME = "duration";
/**
 * Extract the phases and page load time latency into sorted buckets by phase
 *
 * @param samples - Array of "sample" objects
 * @param valueGen - Calls this function to extract the value from the phase. A
 *   "phase" is passed containing duration and start
 */
export declare function bucketPhaseValues(samples: Sample[], valueGen?: any): ValuesByPhase;
export interface ParsedTitleConfigs {
    servers: Array<{
        name: string;
    }>;
    plotTitle: string | undefined;
    browserVersion: string;
}
/**
 * Override the default server and plot title attributes
 *
 * @param tbConfig - Concerned only about the "servers" and "plotTitle"
 *   attribute
 * @param version - Browser version
 */
export declare function resolveTitles(tbConfig: Partial<ITBConfig>, version: string): ParsedTitleConfigs;
/**
 * Generate the HTML render data for the cumulative chart. Ensure to convert to
 * milliseconds for presentation
 *
 * @param controlData - Samples of the benchmark of control server
 * @param experimentData - Samples of the benchmark experiment server
 */
export declare function buildCumulativeChartData(controlData: ITracerBenchTraceResult, experimentData: ITracerBenchTraceResult): {
    categories: string;
    controlData: string;
    experimentData: string;
};
/**
 * Call the stats helper functions to generate the confidence interval and
 * Hodgesâ€“Lehmann estimator. Format the data into HTMLSectionRenderData
 * structure.
 *
 * @param controlValues - Values for the control for the phase
 * @param experimentValues - Values for the experiment for the phase
 * @param phaseName - Name of the phase the values represent
 */
export declare function formatPhaseData(controlValues: number[], experimentValues: number[], phaseName: string): HTMLSectionRenderData;
/**
 * Prioritize the phase that has the largest difference in regression first.
 */
export declare function phaseSorter(a: HTMLSectionRenderData, b: HTMLSectionRenderData): number;
export declare function generateDataForHTML(controlData: ITracerBenchTraceResult, experimentData: ITracerBenchTraceResult, reportTitles: ParsedTitleConfigs): {
    durationSection: HTMLSectionRenderData;
    subPhaseSections: HTMLSectionRenderData[];
};
export default function createConsumeableHTML(controlData: ITracerBenchTraceResult, experimentData: ITracerBenchTraceResult, tbConfig: ITBConfig): string;
export {};
//# sourceMappingURL=create-consumable-html.d.ts.map
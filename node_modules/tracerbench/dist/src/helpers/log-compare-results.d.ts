import { Command } from '@oclif/command';
import { HTMLSectionRenderData, ITracerBenchTraceResult } from './create-consumable-html';
import { ISevenFigureSummary } from './statistics/stats';
import { ICompareFlags } from '../commands/compare';
export interface ICompareJSONResult {
    heading: string;
    phaseName: string;
    isSignificant: boolean;
    estimatorDelta: string;
    controlSampleCount: number;
    experimentSampleCount: number;
    confidenceInterval: string[];
    controlSevenFigureSummary: ISevenFigureSummary;
    experimentSevenFigureSummary: ISevenFigureSummary;
}
export interface ICompareJSONResults {
    benchmarkTableData: ICompareJSONResult[];
    phaseTableData: ICompareJSONResult[];
    areResultsSignificant: boolean;
    isBelowRegressionThreshold: boolean;
}
/**
 * If fidelity is at acceptable number, return true if any of the phase results were significant
 *
 * @param fidelity - Use this to determine if the sample count is too low
 * @param benchmarkIsSigArray - Array of strings of either "Yes" or "No" from TBTable
 * @param phaseIsSigArray - Array of strings of either "Yes" or "No" from TBTable
 */
export declare function anyResultsSignificant(fidelity: number, benchmarkIsSigArray: boolean[], phaseIsSigArray: boolean[]): boolean;
/**
 * If any phase of the experiment has regressed slower beyond the threshold limit returns false; otherwise true
 *
 * @param regressionThreshold - Positive number in milliseconds the experiment has regressed slower eg 100
 * @param benchmarkTableEstimatorDeltas - Array of Estimator Deltas for the Benchmark Table
 * @param phaseTableEstimatorDeltas - Array of Estimator Deltas for the Phase Table
 */
export declare function allBelowRegressionThreshold(regressionThreshold: number | undefined, benchmarkTableEstimatorDeltas: number[], phaseTableEstimatorDeltas: number[]): boolean;
/**
 * Output meta data about the benchmark run and FYI messages to the user.
 *
 * @param cli - This is expected to be a "compare" Command instance
 * @param cliFlags - This is expected to be CLI flags from the "compare" command
 * @param isBelowRegressionThreshold - Boolean indicating if there were any deltas below "regressionThreshold" flag
 */
export declare function outputRunMetaMessagesAndWarnings(cli: Command, cliFlags: Partial<ICompareFlags>, isBelowRegressionThreshold: boolean): void;
/**
 * Generate the summary section for the results.
 *
 * For each phase, color the significance appropriately by the HL estimated difference. Red for regression, green for
 * improvement. Color with monotone if not significant.
 *
 * @param cli - This is expected to be a "compare" Command instance
 * @param phaseResultsFormatted - Array of results from calling formatPhaseData
 */
export declare function outputSummaryReport(cli: Command, phaseResultsFormatted: Array<Pick<HTMLSectionRenderData, 'phase' | 'hlDiff' | 'isSignificant' | 'ciMin' | 'ciMax'>>): void;
/**
 * Return the trimmed compare results in JSON format
 *
 * This is propogated as the default return all the way up to the Compare command directly
 * without the need for the legacy --json flag
 *
 * @param benchmarkTableData - ICompareJSONResult[] from instantiated TBTable#getData() for the top level duration
 * @param phaseTableData - ICompareJSONResult[] from instantiated TBTable#getData() for all sub phases of the top level duration
 * @param areResultsSignificant - A culled boolean if any results are significant this is truthy
 * @param isBelowRegressionThreshold - A culled boolean to check if all results are below the config regression threshold
 * @return jsonResults - A JSON.stringified return of the trimmed compare results
 */
export declare function outputJSONResults(benchmarkTableData: ICompareJSONResult[], phaseTableData: ICompareJSONResult[], areResultsSignificant: boolean, isBelowRegressionThreshold: boolean): string;
/**
 * Collect and analyze the data for the different phases for the experiment and control set and output the result to the console.
 *
 * @param results - This is expected to be generated from tracerbench core's runner. Containing the dataset for experiment and control
 * @param flags - This is expected to be CLI flags from the "compare" command
 * @param cli - This is expected to be a "compare" Command instance
 */
export declare function logCompareResults(results: ITracerBenchTraceResult[], flags: Pick<ICompareFlags, 'fidelity' | 'regressionThreshold'>, cli: Command): Promise<string>;
//# sourceMappingURL=log-compare-results.d.ts.map
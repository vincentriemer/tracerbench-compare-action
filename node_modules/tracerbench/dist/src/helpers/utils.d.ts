import { IMarker, ITraceEvent } from '@tracerbench/core';
import { ITBConfig } from '../command-config/tb-config';
import { ICompareFlags } from '../commands/compare';
/**
 * Handles checking if there is a specific override for the attributeName in the tbConfigs for the given overrideObjectName.
 * Defaults to whatever is in the flags object if there is no override.
 *
 * @param attributeName - Attribute name to check if there is an override in overrideObjectName from tbConfig
 * @param flags - Object containing configs parsed from the Command class
 * @param overrideObjectName - Either "controlBenchmarkEnvironment" or "experimentBenchmarkEnvironment"
 * @param tbConfig - This refers to the parsed JSON from the config file if it exists
 */
export declare function checkEnvironmentSpecificOverride(attributeName: keyof ICompareFlags, flags: ICompareFlags, overrideObjectName: string, tbConfig?: ITBConfig): any;
/**
 * Merge the contents of the right object into the left. Simply replace numbers, strings, arrays
 * and recursively call this function with objects.
 *
 * Note that typeof null == 'object'
 *
 * @param left - Destination object
 * @param right - Content of this object takes precedence
 */
export declare function mergeLeft(left: {
    [key: string]: any;
}, right: {
    [key: string]: any;
}): {
    [key: string]: any;
};
export declare function convertMicrosecondsToMS(ms: string | number): number;
export declare function convertMSToMicroseconds(ms: string | number): number;
export declare function getCookiesFromHAR(har: any): never[];
export declare function normalizeFnName(name: string): string;
export declare function setTraceEvents(file: ITraceEvent[] | {
    metadata: {};
    traceEvents: ITraceEvent[];
}): ITraceEvent[];
export declare function collect(val: any, memo: any): any;
export declare function format(ts: number, start: number): string;
export declare function isMark(event: ITraceEvent): boolean;
export declare function isFrameMark(frame: any, event: any): boolean;
export declare function isFrameNavigationStart(frame: any, event: ITraceEvent): boolean;
export declare function isUserMark(event: ITraceEvent): boolean;
export declare function isCommitLoad(event: any): any;
export declare function byTime(a: any, b: any): number;
export declare function findFrame(events: any[], url: any): any;
export declare function parseMarkers(m: string | string[]): IMarker[];
export declare function removeDuplicates<T>(collection: T[]): T[];
export declare function fillArray(arrLngth: number, incr?: number, strt?: number): number[];
/**
 * "name" is expected to be a titlecased string. We want something the user can type easily so the passed string
 * is converted into lowercased words dasherized. Any extra "/" will also be removed.
 *
 * @param str - String to be converted to dasherized case
 */
export declare function convertToTypable(name: string): string;
export declare function toNearestHundreth(n: number): number;
export declare const chalkScheme: {
    white: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    warning: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    header: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    regress: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    neutral: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    significant: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    imprv: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    phase: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    faint: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    checkmark: string;
    blackBgGreen: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    blackBgRed: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    blackBgBlue: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    blackBgYellow: import("chalk").Chalk & {
        supportsColor: import("chalk").ColorSupport;
    };
    tbBranding: {
        lime: import("chalk").Chalk & {
            supportsColor: import("chalk").ColorSupport;
        };
        blue: import("chalk").Chalk & {
            supportsColor: import("chalk").ColorSupport;
        };
        aqua: import("chalk").Chalk & {
            supportsColor: import("chalk").ColorSupport;
        };
        dkBlue: import("chalk").Chalk & {
            supportsColor: import("chalk").ColorSupport;
        };
        grey: import("chalk").Chalk & {
            supportsColor: import("chalk").ColorSupport;
        };
    };
};
//# sourceMappingURL=utils.d.ts.map
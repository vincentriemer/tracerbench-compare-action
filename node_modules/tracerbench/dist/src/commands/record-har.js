"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const core_1 = require("@tracerbench/core");
const command_config_1 = require("../command-config");
const flags_1 = require("../helpers/flags");
class RecordHAR extends command_config_1.TBBaseCommand {
    async init() {
        const { flags } = this.parse(RecordHAR);
        this.parsedConfig = command_config_1.getConfig(flags.config, flags, this.explicitFlags);
    }
    async run() {
        const { flags } = this.parse(RecordHAR);
        const { url, dest, cookiespath, filename, marker } = flags;
        const { network, cpuThrottleRate, browserArgs } = this.parsedConfig;
        const conditions = {
            network: network ? network : 'none',
            cpu: cpuThrottleRate ? parseInt(cpuThrottleRate, 10) : 1,
        };
        // grab the auth cookies
        const cookies = await fs_extra_1.readJson(path_1.resolve(cookiespath));
        // record the actual HAR and return the archive file
        const harArchive = await core_1.recordHARClient(url, cookies, marker, conditions, core_1.getBrowserArgs(browserArgs));
        const harPath = path_1.join(dest, `${filename}.har`);
        fs_extra_1.writeFileSync(harPath, JSON.stringify(harArchive));
        this.log(`HAR recorded and available here: ${harPath}`);
    }
}
exports.default = RecordHAR;
RecordHAR.description = 'Generates a HAR file from a URL.';
RecordHAR.flags = {
    url: flags_1.url({ required: true, default: undefined }),
    dest: flags_1.dest({ required: true }),
    cookiespath: flags_1.cookiespath({ required: true }),
    filename: flags_1.filename({ required: true, default: 'tracerbench' }),
    marker: flags_1.marker({ required: true }),
    config: flags_1.config(),
};
//# sourceMappingURL=record-har.js.map
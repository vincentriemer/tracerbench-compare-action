"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_config_1 = require("../command-config");
const fs_extra_1 = require("fs-extra");
const path = require("path");
const core_1 = require("@tracerbench/core");
const flags_1 = require("../helpers/flags");
const utils_1 = require("../helpers/utils");
class Trace extends command_config_1.TBBaseCommand {
    async run() {
        const { flags } = this.parse(Trace);
        const { url, cpuThrottleRate, cookiespath, tbResultsFolder, insights, locations, network, harpath, } = flags;
        const methods = [''];
        const cookiesJSON = await fs_extra_1.readJson(path.resolve(cookiespath));
        const traceHAR = path.resolve(harpath);
        const traceHARJSON = await fs_extra_1.readJson(traceHAR);
        const conditions = {
            cpu: cpuThrottleRate,
            network,
        };
        // run the liveTrace
        const { traceEvents } = await core_1.liveTrace(url, tbResultsFolder, cookiesJSON, conditions);
        const analyzeOptions = {
            traceEvents,
            traceHARJSON,
            methods,
        };
        // analyze the liveTrace
        await core_1.analyze(analyzeOptions);
        if (insights) {
            // js-eval-time
            let trace;
            let totalJSDuration = 0;
            let totalCSSDuration = 0;
            const methods = new Set();
            try {
                trace = utils_1.setTraceEvents(traceEvents);
            }
            catch (error) {
                this.error(`${error}`);
            }
            trace
                .filter((event) => event.name === 'EvaluateScript')
                .filter((event) => event.args.data.url)
                .forEach((event) => {
                const url = event.args.data.url;
                const durationInMs = event.dur / 1000;
                totalJSDuration += durationInMs;
                this.log(`JS: ${url}: ${durationInMs.toFixed(2)}`);
            });
            // log js-eval-time
            this.log(`JS: Evaluation Total Duration: ${totalJSDuration.toFixed(2)}ms \n\n`);
            // css-parse
            trace
                .filter((event) => event.name === 'ParseAuthorStyleSheet')
                .filter((event) => event.args.data.styleSheetUrl)
                .forEach((event) => {
                const url = event.args.data.styleSheetUrl;
                const durationInMs = event.dur / 1000;
                totalCSSDuration += durationInMs;
                this.log(`CSS: ${url}: ${durationInMs.toFixed(2)}`);
            });
            // log css-parse-time
            this.log(`CSS: Evaluation Total Duration: ${totalCSSDuration.toFixed(2)}ms \n\n`);
            // list-functions
            try {
                const profile = core_1.loadTrace(trace).cpuProfile(-1, -1);
                if (locations) {
                    profile.nodeMap.forEach((node) => {
                        const { functionName, url, lineNumber, columnNumber, } = node.callFrame;
                        methods.add(`${url}:${lineNumber}:${columnNumber}.${utils_1.normalizeFnName(functionName)}`);
                    });
                }
                else {
                    profile.nodeMap.forEach((node) => {
                        methods.add(utils_1.normalizeFnName(node.callFrame.functionName));
                    });
                }
            }
            catch (error) {
                this.error(error);
            }
            try {
                trace = utils_1.setTraceEvents(traceEvents);
                const traceLoad = trace.filter(utils_1.isCommitLoad);
                traceLoad.forEach(({ args: { data: { frame, url }, }, }) => {
                    this.log(`Frame-URL: ${url} | Frame-ID: ${frame}`);
                });
            }
            catch (error) {
                this.error(`${error}`);
            }
        }
    }
}
exports.default = Trace;
Trace.description = `Parses a CPU profile and aggregates time across heuristics. Can be vertically sliced with event names.`;
Trace.flags = {
    cpuThrottleRate: flags_1.cpuThrottleRate({ required: true }),
    tbResultsFolder: flags_1.tbResultsFolder({ required: true }),
    harpath: flags_1.harpath({ required: true }),
    network: flags_1.network(),
    url: flags_1.url({ required: true }),
    cookiespath: flags_1.cookiespath({ required: true }),
    iterations: flags_1.iterations({ required: true }),
    locations: flags_1.locations(),
    insights: flags_1.insights,
};
//# sourceMappingURL=trace.js.map
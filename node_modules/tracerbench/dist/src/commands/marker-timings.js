"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_config_1 = require("../command-config");
const fs_extra_1 = require("fs-extra");
const path = require("path");
const flags_1 = require("../helpers/flags");
const utils_1 = require("../helpers/utils");
class MarkerTimings extends command_config_1.TBBaseCommand {
    async run() {
        const { flags } = this.parse(MarkerTimings);
        const { tracepath } = flags;
        const filter = utils_1.collect(flags.filter, []);
        const traceFrame = flags.traceFrame ? flags.traceFrame : flags.url;
        let frame = null;
        let startTime = -1;
        let rawTraceData = null;
        let trace = null;
        if (!traceFrame && !flags_1.url) {
            this.error(`Either a traceFrame or url are required flags.`);
        }
        try {
            rawTraceData = fs_extra_1.readJSONSync(path.resolve(tracepath));
        }
        catch (e) {
            this.error(e);
        }
        try {
            trace = utils_1.setTraceEvents(rawTraceData);
        }
        catch (e) {
            this.error(e);
        }
        if (traceFrame.startsWith('http')) {
            frame = utils_1.findFrame(trace, traceFrame);
        }
        else {
            frame = traceFrame;
        }
        if (!frame) {
            this.error(`frame not found`);
        }
        trace
            .filter((event) => utils_1.isMark(event) || utils_1.isCommitLoad(event))
            .sort(utils_1.byTime)
            .forEach((event) => {
            if (utils_1.isFrameNavigationStart(frame, event)) {
                startTime = event.ts;
                this.log(`Marker Timings: ${utils_1.format(event.ts, startTime)} ${event.name}`);
            }
            else if (utils_1.isFrameMark(frame, event)) {
                if (startTime === -1) {
                    startTime = event.ts;
                }
                this.log(`Marker Timings: ${utils_1.format(event.ts, startTime)} ${event.name}`);
            }
            else if (utils_1.isUserMark(event)) {
                if (filter.length === 0 ||
                    filter.some((f) => event.name.indexOf(f) !== -1)) {
                    this.log(`Marker Timings: ${utils_1.format(event.ts, startTime)} ${event.name}`);
                }
            }
            else if (utils_1.isCommitLoad(event)) {
                const { data } = event.args;
                if (data.frame === frame) {
                    this.log(`Marker Timings: ${utils_1.format(event.ts, startTime)} ${event.name} ${data.frame} ${data.url}`);
                }
            }
        });
    }
}
exports.default = MarkerTimings;
MarkerTimings.description = 'Get list of all user-timings from trace';
MarkerTimings.flags = {
    tracepath: flags_1.tracepath({ required: true }),
    filter: flags_1.filter(),
    url: flags_1.url({ required: true }),
    traceFrame: flags_1.traceFrame(),
};
//# sourceMappingURL=marker-timings.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const benchmark_1 = require("../benchmark");
const initial_render_metric_1 = require("./initial-render-metric");
/**
 * Benchmark by tracing nativation to url and measuring marks of phases until
 * Paint.
 */
class InitialRenderBenchmark extends benchmark_1.Benchmark {
    constructor(params) {
        validateParams(params);
        super(params);
        this.params = params;
    }
    createResults(meta) {
        return {
            meta,
            samples: [],
            set: this.name
        };
    }
    async performIteration(t, results, i) {
        const url = this.params.url;
        const markers = this.params.markers;
        // in Canary, devtools.timeline can be removed for rail category
        let categories = 'blink.user_timing,blink_gc,devtools.timeline,rail,v8,v8.execute';
        if (this.params.runtimeStats) {
            categories += ',disabled-by-default-v8.runtime_stats';
        }
        if (this.params.cpuThrottleRate !== undefined) {
            await t.setCPUThrottlingRate(this.params.cpuThrottleRate);
        }
        if (this.params.networkConditions !== undefined) {
            await t.emulateNetworkConditions(this.params.networkConditions);
        }
        if (this.params.emulateDeviceSettings !== undefined) {
            await t.emulateDevice(this.params.emulateDeviceSettings);
            await t.setUserAgent(this.params.emulateDeviceSettings);
        }
        // await client.send(“Tracing.startTracing”, request);
        const tracing = await t.startTracing(categories);
        const { traceComplete } = tracing;
        const navigateToBlank = new Promise(resolve => {
            t.onNavigate = () => {
                if (t.frame.url === 'about:blank') {
                    resolve(tracing.end());
                }
            };
        });
        await t.navigate(url);
        const trace = await Promise.race([
            traceComplete,
            navigateToBlank.then(() => traceComplete)
        ]);
        t.onNavigate = undefined;
        if (this.params.cpuThrottleRate !== undefined) {
            await t.setCPUThrottlingRate(1);
        }
        if (this.params.networkConditions !== undefined) {
            await t.disableNetworkEmulation();
        }
        if (i === 0 && this.params.saveFirstTrace) {
            fs.writeFileSync(this.params.saveFirstTrace, JSON.stringify(trace.events, null, 2));
        }
        if (this.params.saveTraces) {
            fs.writeFileSync(this.params.saveTraces(i), JSON.stringify(trace.events, null, 2));
        }
        if (!trace.mainProcess || !trace.mainProcess.mainThread) {
            console.warn('unable to find main process');
            return;
        }
        const metric = new initial_render_metric_1.default(markers, this.params);
        const sample = metric.measure(trace);
        // log progress to stderr
        results.samples.push(sample);
    }
}
exports.InitialRenderBenchmark = InitialRenderBenchmark;
function validateParams(params) {
    if (!params.markers || params.markers.length === 0) {
        params.markers = [
            {
                label: 'render',
                start: 'fetchStart'
            }
        ];
    }
    if (!params.url) {
        throw new Error('url is required');
    }
}
//# sourceMappingURL=initial-render.js.map
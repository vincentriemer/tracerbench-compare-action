import Protocol from 'devtools-protocol';
import { Benchmark, IBenchmarkMeta, IBenchmarkParams } from '../benchmark';
import { ITab } from '../tab';
import { IInitialRenderSamples, IMarker } from './initial-render-metric';
export interface IInitialRenderBenchmarkParams extends IBenchmarkParams {
    /**
     * URL to measure initial render of.
     */
    url: string;
    /**
     * Performance marks to divide up phases.
     *
     * The last mark until paint will define the duration sample.
     */
    markers: IMarker[];
    /**
     * Collect runtime call stats.
     *
     * This is a disabled-by-default tracing category so may add some overhead
     * to result.
     */
    runtimeStats?: boolean;
    /**
     * Trace while throttling CPU.
     */
    cpuThrottleRate?: number;
    /**
     * Trace while emulating network conditions.
     */
    networkConditions?: Protocol.Network.EmulateNetworkConditionsRequest;
    /**
     * Save trace for first iteration.
     *
     * Useful for double checking you are measuring what you think you are
     * measuring.
     */
    saveFirstTrace?: string;
    /**
     * Save trace for each iteration, useful for debugging outliers in data.
     */
    saveTraces?: (iteration: number) => string;
    /**
     * Settings to emulate a device.
     */
    emulateDeviceSettings?: Protocol.Emulation.SetDeviceMetricsOverrideRequest & Protocol.Emulation.SetUserAgentOverrideRequest;
}
/**
 * Benchmark by tracing nativation to url and measuring marks of phases until
 * Paint.
 */
export declare class InitialRenderBenchmark extends Benchmark<IInitialRenderSamples> {
    protected params: IInitialRenderBenchmarkParams;
    constructor(params: IInitialRenderBenchmarkParams);
    protected createResults(meta: IBenchmarkMeta): IInitialRenderSamples;
    protected performIteration(t: ITab, results: IInitialRenderSamples, i: number): Promise<void>;
}
//# sourceMappingURL=initial-render.d.ts.map
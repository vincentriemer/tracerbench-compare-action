import { Chrome, RootConnection, SpawnOptions, SessionConnection } from 'chrome-debugging-client';
import { IBenchmark } from './runner';
import { ITab } from './tab';
export interface IBenchmarkMeta {
    browserVersion: string;
    cpus: string[];
}
export interface IBenchmarkState<R> {
    process: Chrome;
    browser: RootConnection;
    tab: SessionConnection;
    results: R;
}
export interface IBenchmarkParams {
    name: string;
    browser?: Partial<SpawnOptions>;
    /**
     * Delay between samples.
     */
    delay?: number;
}
export declare abstract class Benchmark<R> implements IBenchmark<IBenchmarkState<R>, R> {
    name: string;
    private browserOptions?;
    private delay;
    private process;
    constructor(params: IBenchmarkParams);
    run(iterations: number): Promise<R>;
    setup(): Promise<IBenchmarkState<R>>;
    perform(state: IBenchmarkState<R>, iteration: number): Promise<IBenchmarkState<R>>;
    finalize(state: IBenchmarkState<R>): Promise<R>;
    dispose(): Promise<void>;
    protected abstract createResults(meta: IBenchmarkMeta): R;
    protected warm(_: ITab): Promise<void>;
    protected abstract performIteration(t: ITab, results: R, index: number): Promise<void>;
    private withTab;
}
//# sourceMappingURL=benchmark.d.ts.map
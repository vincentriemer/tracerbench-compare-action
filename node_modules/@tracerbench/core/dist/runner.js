"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Runner {
    constructor(benchmarks) {
        this.benchmarks = benchmarks;
    }
    /**
     * Shuffle when to run the benchmarks
     *
     * @param iterations - Number of iterations to run for each Benchmark
     * @param logger - If CLI command is using this, a log function (this.log) can be passed and will be used to indicate progress
     */
    async run(iterations, logger) {
        try {
            let states = await this.inSequence(benchmark => benchmark.setup());
            for (let iteration = 0; iteration < iterations; iteration++) {
                states = await this.shuffled((benchmark, i) => benchmark.perform(states[i], iteration));
                if (logger) {
                    logger(`Finished ${iteration + 1} of ${iterations} runs.`);
                }
            }
            return this.inSequence((benchmark, i) => benchmark.finalize(states[i]));
        }
        finally {
            for (const benchmark of this.benchmarks) {
                await benchmark.dispose();
            }
        }
    }
    async inSequence(callback) {
        const benchmarks = this.benchmarks;
        const results = [];
        for (let i = 0; i < benchmarks.length; i++) {
            results.push(await callback(benchmarks[i], i));
        }
        return results;
    }
    async shuffled(callback) {
        const benchmarks = this.benchmarks;
        const results = new Array(benchmarks.length);
        const indices = benchmarks.map((_, i) => i);
        shuffle(indices);
        for (const index of indices) {
            results[index] = await callback(benchmarks[index], index);
        }
        return results;
    }
}
exports.Runner = Runner;
function shuffle(arr) {
    // for i from n−1 downto 1 do
    //      j ← random integer such that 0 ≤ j ≤ i
    //      exchange a[j] and a[i]
    for (let i = arr.length - 1; i >= 1; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        const tmp = arr[j];
        arr[j] = arr[i];
        arr[i] = tmp;
    }
}
//# sourceMappingURL=runner.js.map
import Protocol from 'devtools-protocol';
import Trace from './trace/trace';
import { RootConnection, SessionConnection } from 'chrome-debugging-client';
export interface ITab {
    isTracing: boolean;
    /** The current frame for the tab */
    frame: Protocol.Page.Frame;
    onNavigate: (() => void) | undefined;
    /** Add a script to execute on load */
    addScriptToEvaluateOnLoad(source: string): Promise<Protocol.Page.ScriptIdentifier>;
    /** Remove a previously added script */
    removeScriptToEvaluateOnLoad(identifier: Protocol.Page.ScriptIdentifier): Promise<void>;
    /** Navigates to the specified url */
    navigate(url: string, waitForLoad?: boolean): Promise<void>;
    /** Start tracing */
    startTracing(categories: string, options?: string): Promise<ITracing>;
    /** Clear browser cache and memory cache */
    clearBrowserCache(): Promise<void>;
    /** Perform GC */
    collectGarbage(): Promise<void>;
    setCPUThrottlingRate(rate: number): Promise<void>;
    emulateNetworkConditions(conditions: Protocol.Network.EmulateNetworkConditionsRequest): Promise<void>;
    disableNetworkEmulation(): Promise<void>;
    /** Configure tab to take on the device emulation settings */
    emulateDevice(deviceSettings: Protocol.Emulation.SetDeviceMetricsOverrideRequest): Promise<void>;
    /** Cofigure tabe to send the specified user agent */
    setUserAgent(userAgentSettings: Protocol.Emulation.SetUserAgentOverrideRequest): Promise<void>;
}
export default function createTab(id: string, browser: RootConnection, tab: SessionConnection, frame: Protocol.Page.Frame): ITab;
export interface ITracing {
    traceComplete: Promise<Trace>;
    end(): Promise<void>;
}
//# sourceMappingURL=tab.d.ts.map
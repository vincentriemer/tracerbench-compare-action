"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const load_trace_1 = require("./load_trace");
const aggregator_1 = require("./aggregator");
const reporter_1 = require("./reporter");
const utils_1 = require("./utils");
const module_matcher_1 = require("./module_matcher");
const trace_1 = require("../trace");
const cloneDeep = require('lodash.clonedeep');
async function analyze(options) {
    const { traceHARJSON, event, filename, traceEvents, report, methods, } = options;
    const trace = load_trace_1.loadTrace(traceEvents);
    const profile = getCPUProfile(trace, event);
    const { hierarchy } = profile;
    const modMatcher = new module_matcher_1.ModuleMatcher(hierarchy, traceHARJSON);
    exportHierarchy(traceEvents, hierarchy, trace, filename, modMatcher);
    const categories = utils_1.formatCategories(report, methods);
    const allMethods = utils_1.methodsFromCategories(categories);
    utils_1.addRemainingModules(allMethods, categories, modMatcher);
    aggregator_1.verifyMethods(allMethods);
    const aggregations = aggregator_1.aggregate(hierarchy, allMethods, traceHARJSON, modMatcher);
    const collapsed = aggregator_1.collapseCallFrames(aggregations);
    const categorized = aggregator_1.categorizeAggregations(collapsed, categories);
    reporter_1.report(categorized);
    const renderNodes = utils_1.getRenderingNodes(hierarchy);
    renderNodes.forEach(node => {
        const renderAgg = aggregator_1.aggregate(node, allMethods, traceHARJSON, modMatcher);
        const renderCollapsed = aggregator_1.collapseCallFrames(renderAgg);
        const renderCategorized = aggregator_1.categorizeAggregations(renderCollapsed, categories);
        // console.log(`Render Node:${node.data.callFrame.functionName}`); // tslint:disable-line  no-console
        reporter_1.report(renderCategorized);
    });
}
exports.analyze = analyze;
function exportHierarchy(rawTraceData, hierarchy, trace, filename = 'trace-processed', modMatcher) {
    const traceObj = { traceEvents: cloneDeep(rawTraceData) };
    hierarchy.each(node => {
        const completeEvent = {
            pid: trace.mainProcess.id,
            tid: trace.mainProcess.mainThread.id,
            ts: node.data.min,
            ph: trace_1.TRACE_EVENT_PHASE_COMPLETE,
            cat: 'blink.user_timing',
            name: node.data.callFrame.functionName,
            args: {
                data: {
                    functionName: node.data.callFrame.functionName,
                    moduleName: modMatcher.findModuleName(node.data.callFrame),
                },
            },
            dur: node.data.max - node.data.min,
        };
        traceObj.traceEvents.push(completeEvent);
    });
    fs_extra_1.writeJSONSync(`${filename}.json`, JSON.stringify(traceObj));
}
exports.exportHierarchy = exportHierarchy;
function getCPUProfile(trace, event) {
    const { min, max } = utils_1.computeMinMax(trace, 'navigationStart', event);
    return trace.cpuProfile(min, max);
}
//# sourceMappingURL=analyze.js.map
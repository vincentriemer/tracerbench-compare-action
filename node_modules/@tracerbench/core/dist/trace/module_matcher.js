"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const metadata_1 = require("./metadata");
class ModuleMatcher {
    constructor(hierarchy, archive) {
        this.parsedFiles = {};
        this.moduleSet = new Set();
        this.archive = archive;
        hierarchy.each((node) => {
            const moduleName = this.findModuleName(node.data.callFrame);
            if (moduleName === undefined || moduleName === 'unknown') {
                return;
            }
            this.moduleSet.add(moduleName);
        });
    }
    getModuleList() {
        return this.moduleSet;
    }
    findModuleName(callFrame) {
        const { url } = callFrame;
        // guards against things like undefined url or urls like "extensions::SafeBuiltins"
        if (url === undefined ||
            (url.substr(0, 7) !== 'https:/' && url.substr(0, 7) !== 'http://') ||
            callFrame.lineNumber === undefined ||
            callFrame.columnNumber === undefined ||
            callFrame.functionName === undefined ||
            callFrame.scriptId === undefined) {
            return undefined;
        }
        const { parsedFiles } = this;
        let file = parsedFiles[url];
        if (file) {
            return file.moduleNameFor(callFrame);
        }
        file = this.parsedFiles[url] = new metadata_1.ParsedFile(this.contentFor(url));
        return file.moduleNameFor(callFrame);
    }
    contentFor(url) {
        const entry = this.archive.log.entries.find((e) => e.request.url === url);
        if (!entry) {
            throw new Error(`Could not find "${url}" in the archive file.`);
        }
        return entry.response.content.text;
    }
}
exports.ModuleMatcher = ModuleMatcher;
//# sourceMappingURL=module_matcher.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chrome_debugging_client_1 = require("chrome-debugging-client");
const conditions_1 = require("./conditions");
const utils_1 = require("./utils");
async function createBrowser(browserArgs = [], headless = true) {
    const browser = await chrome_debugging_client_1.spawnChrome({
        additionalArguments: browserArgs,
        stdio: 'inherit',
        chromeExecutable: undefined,
        userDataDir: undefined,
        userDataRoot: undefined,
        url: undefined,
        disableDefaultArguments: false,
        headless,
    });
    return browser;
}
exports.createBrowser = createBrowser;
async function newTab(browser, url = 'about:blank') {
    const { targetId } = await browser.send('Target.createTarget', {
        url,
    });
    return await browser.attachToTarget(targetId);
}
exports.newTab = newTab;
async function getTab(browser) {
    // const tabs = await apiClient.send();
    // create one tab at about:blank
    const { targetId } = await browser.send('Target.createTarget', {
        url: 'about:blank',
    });
    const tab = browser.connection(await browser.send('Target.attachToTarget', {
        targetId,
        flatten: true,
    }));
    if (!tab) {
        throw Error('failed to attach to target');
    }
    // close other page targets
    const { targetInfos } = await browser.send('Target.getTargets');
    for (const targetInfo of targetInfos) {
        if (targetInfo.type === 'page' && targetInfo.targetId !== targetId) {
            await browser.send('Target.closeTarget', {
                targetId: targetInfo.targetId,
            });
        }
    }
    await browser.send('Target.activateTarget', { targetId });
    return tab;
}
exports.getTab = getTab;
async function emulate(client, conditions) {
    // tells whether emulation is supported
    const { result: canEmulate } = await client.send('Emulation.canEmulate');
    if (canEmulate) {
        await client.send('Emulation.setCPUThrottlingRate', {
            rate: conditions.cpu,
        });
    } // throw error if configured to emulate and returned false
    // needs to ensure Network.enable
    const { result: canEmulateNetworkConditions } = await client.send('Network.canEmulateNetworkConditions');
    if (conditions.network !== undefined && canEmulateNetworkConditions) {
        const networkCondition = conditions_1.networkConditions[conditions.network];
        if (networkCondition) {
            await client.send('Network.emulateNetworkConditions', networkCondition);
        }
        else {
            throw new Error(`Could not find network emulation "${conditions.network}"`);
        }
    }
}
exports.emulate = emulate;
async function setCookies(page, cookies) {
    for (let i = 0; i < cookies.length; i++) {
        const cookie = utils_1.filterObjectByKeys(cookies[i], ['name', 'value', 'domain']);
        try {
            await page.send('Network.setCookie', cookie);
        }
        catch (error) {
            throw new Error(`${error}. CookieParam format invalid: https://chromedevtools.github.io/devtools-protocol/tot/Network#type-CookieParam.`);
        }
    }
}
exports.setCookies = setCookies;
//# sourceMappingURL=trace-utils.js.map